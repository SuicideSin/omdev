//Get Console Log
import console.Shell;
view.getDockableWindowManager().addDockableWindow("console");
console.Console console=view.getDockableWindowManager().getDockable("console");

//Save Current File
buffer.save(view,null,true);

//Get Executable Name
String exe_name=buffer.getName();

if(exe_name.endsWith(".cpp"))
	exe_name=exe_name.substring(0,exe_name.length()-4)+".exe";
else
	exe_name+=".exe";

//Determine OS Compile Script
String script="linux.sh";

if(OperatingSystem.isMacOS())
	script="mac.sh";
else if(OperatingSystem.isWindows())
	script="windows.bat";

//Create Script Command
String scripts_path=jEdit.getJEditHome()+"/../compile_scripts/";
String script_argument=scripts_path+script;
String error_argument=scripts_path+"errors.txt";
String build_argument=scripts_path+"builds";
String include_argument=jEdit.getJEditHome()+"/../include";
String code_argument=buffer.getPath();
String exe_argument=buffer.getDirectory()+exe_name;

//Create Script Commands (Unix)
if(!OperatingSystem.isWindows())
{
	scripts_path=scripts_path.replace(" ","\\ ");
	script_argument=script_argument.replace(" ","\\ ");
	error_argument=error_argument.replace(" ","\\ ");
	build_argument=build_argument.replace(" ","\\ ");
	include_argument=include_argument.replace(" ","\\ ");
	code_argument=code_argument.replace(" ","\\ ");
	exe_argument=exe_argument.replace(" ","\\ ");
}

//CD To Project Directory
runInSystemShell(view,"cd \""+buffer.getDirectory()+"\"");

//Create Compile Command
String compile_command="\""+script_argument+"\" \""+error_argument+"\" \""+build_argument+"\" \""+include_argument+
	"\" \""+code_argument+"\" \""+exe_argument+"\"";

//Run Compile Script Command
runInSystemShell(view,compile_command);
waitForConsole(view);

//Wait a Second (For Windows...)
try
{
	Thread.sleep(1000);
}
catch(InterruptedException e)
{
	Thread.currentThread().interrupt();
}

//Get Error Text
Buffer error_buffer=jEdit.openTemporary(view,scripts_path,"errors.txt",false);
String error_text="";

if(error_buffer!=null)
	error_text=error_buffer.getText(0,error_buffer.getLength());

//Clear Console Log
clearConsole(view);
waitForConsole(view);

//Display Errors
if(error_buffer.getLength()>2)
{
	console.print(console.getErrorColor(),"Error(s)\n"+error_text+"\n\n");
	waitForConsole(view);
}

//Run Code if No Errors
else
{
	//Create Run Command
	String run_command="./"+exe_name;

	if(OperatingSystem.isWindows())
		run_command=exe_name;

	//Run Run Command
	runInSystemShell(view,run_command);

	//Clear Console
	clearConsole(view);
	console.print(console.getErrorColor(),"Running\n\n");
	waitForConsole(view);
}
